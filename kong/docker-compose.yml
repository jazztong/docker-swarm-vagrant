version: "3.7"

configs:
  kong:
    name: kong_config_v1
    file: ./default.yml

volumes:
  kong_data: {}

networks:
  kong-net:
    external: false

services:
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    configs:
      - source: kong
        target: var/lib/kong/default.yml
    user: "${KONG_USER:-kong}"
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/default.yml
    networks:
      - kong-net
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  konga:
    image: pantsel/konga
    networks:
      - kong-net
    environment:
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      NODE_ENV: production
    depends_on:
      - kong
    ports:
      - "1337:1337"

  webapi:
    image: mcr.microsoft.com/dotnet/core/samples:aspnetapp
    networks:
      - kong-net
    ports:
      - "5000:80"
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.platform.os == linux
